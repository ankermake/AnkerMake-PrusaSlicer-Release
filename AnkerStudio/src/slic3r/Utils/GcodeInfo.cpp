#include "GcodeInfo.hpp"
#include "libslic3r/Utils.hpp"

namespace Slic3r {

using namespace std;
bool GcodeInfo::GetIsAnkerFromGCode(const string& line)
{
	// new
	if (line.find("generated by AnkerMake") != string::npos) {
		return true;
	}

	// old
	if (line.find(";Recompiled by AnkerMake") != string::npos) {
		return true;
	}
	if (line.find(";Generated with AnkerSlicer") != string::npos) {
		return true;
	}

	return false;
}

mqtt_device_type GcodeInfo::GetMachineNameFromGCode(const string& line)
{
	mqtt_device_type name = DEVICE_UNKNOWN_TYPE;

	// new for AnkerMake Studio: "; printer_model = M5C"
	if (line.find(";Print Mode") != string::npos) {
		if (line.find("M5") != string::npos) {
			if (line.find("M5C") != string::npos) {
				name = DEVICE_UNKNOWN_TYPE;
			}
			else {
				name = DEVICE_UNKNOWN_TYPE;
			}
			return name;
		}
	}

	// old for AnkerMake
	if (line.find(";Machine Name:AnkerMake M5") != string::npos) {
		if (line.find(";Machine Name:AnkerMake M5C") != string::npos) {
			name = DEVICE_UNKNOWN_TYPE;
		}
		else {
			name = DEVICE_UNKNOWN_TYPE;
		}
		return name;
	}

	return name;
}

void GcodeInfo::GetMachineInfoFromGCode(const string& gcodeFilePath, bool& isAnkerBrand, mqtt_device_type& machineType)
{
	isAnkerBrand = false;
	machineType = DEVICE_UNKNOWN_TYPE;

	auto filePath = wxString::FromUTF8(gcodeFilePath).ToStdString();	
	ifstream file(filePath);
	if (!file.is_open()) {
		return;
	}

	string line;
	int count = 0;

	while (getline(file, line) && ++count < 1000) {
		if (!isAnkerBrand) {
			isAnkerBrand = GetIsAnkerFromGCode(line);
		}

		if (machineType == DEVICE_UNKNOWN_TYPE) {
			machineType = GetMachineNameFromGCode(line);
			if (machineType != DEVICE_UNKNOWN_TYPE) {
				isAnkerBrand = true;
				break;
			}
		}
	}

	ANKER_LOG_INFO << "Is ankerband: " << isAnkerBrand << ", machineType: " << machineType;
	file.close();
}
}
