#ifndef slic3r_GLGizmoFdmSupports_hpp_
#define slic3r_GLGizmoFdmSupports_hpp_

#include "GLGizmoPainterBase.hpp"

#include "slic3r/GUI/I18N.hpp"
#include "slic3r/GUI/AnkerBtn.hpp"
#include "slic3r/GUI/Common/AnkerSliderCtrl.hpp"
#include "slic3r/GUI/Common/AnkerSimpleCombox.hpp"
#include "slic3r/GUI/AnkerObjectBarView.hpp"
#include "slic3r/GUI/Common/AnkerLineEditUnit.hpp"

namespace Slic3r::GUI {

class GLGizmoFdmSupports : public GLGizmoPainterBase
{
public:
    GLGizmoFdmSupports(GLCanvas3D& parent, const std::string& icon_filename, unsigned int sprite_id)
        : GLGizmoPainterBase(parent, icon_filename, sprite_id), m_pInputWindowSizer(nullptr), m_panelVisibleFlag(false){}

    void render_painter_gizmo() override;

    void reset();

protected:
    void on_render_input_window(float x, float y, float bottom_limit) override;
    std::string on_get_name(bool i18n = true) const override;

    wxString handle_snapshot_action_name(bool shift_down, Button button_down) const override;

    std::string get_gizmo_entering_text() const override { return _u8L("Entering Paint-on supports"); }
    std::string get_gizmo_leaving_text() const override { return _u8L("Leaving Paint-on supports"); }
    std::string get_action_snapshot_name() const override { return _u8L("Paint-on supports editing"); }


private:
    bool on_init() override;
    void data_changed() override;

    void update_model_object() const override;
    void update_from_model_object() override;

    void on_opening() override;
    void on_shutdown() override;
    PainterGizmoType get_painter_type() const override;

    void select_facets_by_angle(float threshold, bool block);

    // Anker
    void set_input_window_state(bool on);

    wxStaticText* add_static_text(wxBoxSizer* sizer, wxPanel* panel, wxString textStr, int align);
    AnkerLineEditUnit* add_line_edit(wxBoxSizer* sizer, wxPanel* panel, wxString textStr, wxString unit, wxSize size, int align);
    AnkerBtn* add_button(wxBoxSizer* sizer, wxPanel* panel, int align, wxSize size, wxBitmap* bitImage = nullptr, wxBitmap* hoverImage = nullptr, bool should_handle_mousemove = true);
    AnkerTextBtn* add_filament_item(wxPanel* panel, wxSize size, int filamentIndex, wxColour filamentColor, bool filamentVisible);
    void btn_bind_press_event(AnkerBtn* button, wxBitmap* bitImage, wxBitmap* pressedImage, std::function<void(bool)> func);
    void bind_slider_and_text(AnkerSlider& slider, wxRichTextCtrl& textCtrl, std::function<void(float)> func);
    void high_light_overhang_by_angle(float angle);
    void handle_item_filament_clicked(wxCommandEvent& event);
    void sync_data_from_param_panel();
    void set_button_state(AnkerBtn* button, wxString state);
    void set_slider_value(AnkerSlider* slider, double value);
    void on_paint();

    // This map holds all translated description texts, so they can be easily referenced during layout calculations
    // etc. When language changes, GUI is recreated and this class constructed again, so the change takes effect.
    std::map<std::string, wxString> m_desc;

    EnforcerBlockerType m_currentType;
    wxBoxSizer* m_pInputWindowSizer;
    AnkerSimpleCombox* m_styleChoice;
    const double default_selected_angle = 55.0;
    double m_selected_angle = default_selected_angle;

    bool m_panelVisibleFlag;
    wxPanel* supportPanel;
    wxBoxSizer* supportPanelSizer;
    AnkerLineEditUnit* thresholdTextCtrl;
    AnkerBtn* buildPlateButton;
    wxStaticText* supportMaterialText;
    AnkerTextBtn* supportMaterialButton;
    wxStaticText* topSurfaceMaterialText;
    AnkerTextBtn* topSurfaceMaterialButton;
    AnkerSlider* brushSlider;
    AnkerSlider* clippingSlider;
    AnkerBtn* highLightButton;


    bool waiting_for_autogenerated_supports = false;
    bool has_backend_supports();
    void auto_generate();
    void apply_data_from_backend();
};



} // namespace Slic3r::GUI


#endif // slic3r_GLGizmoFdmSupports_hpp_
